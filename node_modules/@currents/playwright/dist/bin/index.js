#! /usr/bin/env node
"use strict";var I=Object.create;var g=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,R=Object.prototype.hasOwnProperty;var E=(e,r,n,c)=>{if(r&&typeof r=="object"||typeof r=="function")for(let a of T(r))!R.call(e,a)&&a!==n&&g(e,a,{get:()=>r[a],enumerable:!(c=j(r,a))||c.enumerable});return e};var p=(e,r,n)=>(n=e!=null?I(k(e)):{},E(r||!e||!e.__esModule?g(n,"default",{value:e,enumerable:!0}):n,e));var Ge=require("source-map-support/register"),v=p(require("fs"));var u=p(require("debug")),m=(0,u.default)("currents"),i=(...e)=>m(...e);i.extend=m.extend.bind(m);var s=p(require("chalk")),N=p(require("util"));var q=s.default.cyan,M=s.default.blueBright,W=s.default.red,J=s.default.green,Y=s.default.gray,z=s.default.white,Q=s.default.magenta,d=s.default.dim;var O={ciBuildId:{name:"CI Build ID",env:"CURRENTS_CI_BUILD_ID",cli:"--ci-build-id"},recordKey:{name:"Record Key",env:"CURRENTS_RECORD_KEY",cli:"--key"},projectId:{name:"Project ID",env:"CURRENTS_PROJECT_ID",cli:"--project-id"},tag:{name:"Currents Tag",env:"CURRENTS_TAG",cli:"--tag"}};function l(e){return O[e].env}var P=p(require("fs"));function f(e){return{ciBuildId:e.ciBuildId,projectId:e.projectId,recordKey:e.key,tag:e.tag,enableTestResults:e.pwcEnableTestResults,removeTitleTags:e.pwcRemoveTitleTags}}var o=require("@commander-js/extra-typings"),C=p(require("chalk"));var y={name:"@currents/playwright",version:"0.10.7",main:"./dist/index.js",author:"Currents Software Inc",license:"GPL-3.0-or-later",scripts:{test:"jest",rm:"rimraf dist",lint:'TIMING=1 eslint "**/*.ts*"',build:"tsup-node --minify --dts",dev:"tsup-node --watch --dts",release:"release-it ","publish:npm":"npm run rm  && npm run build && ./publish.js","release-ci":"npm run rm && npm run build && ./publish.js -t latest"},bin:{pwc:"./dist/bin/index.js"},devDependencies:{"@playwright/test":"1.40.0","@release-it/conventional-changelog":"^7.0.2","@swc/jest":"^0.2.24","@types/async-retry":"^1.4.5","@types/babel__code-frame":"^7.0.3","@types/debug":"^4.1.11","@types/getos":"^3.0.1","@types/jest":"^29.5.3","@types/json-stringify-safe":"^5.0.0","@types/lodash":"^4.14.191","@types/randomstring":"^1.1.8","@types/shelljs":"^0.8.11","@types/stack-utils":"^2.0.1",eslint:"^7.32.0","eslint-config-custom":"*",jest:"^29.5.0",msw:"^1.2.3","release-it":"^16.2.1",rimraf:"^4.1.1",tsconfig:"*",tsup:"^6.5.0",typescript:"^4.5.2",wtfnode:"^0.9.1"},dependencies:{"@babel/code-frame":"^7.18.6","@commander-js/extra-typings":"^11.1.0","@currents/commit-info":"^1.0.0","async-retry":"^1.3.3",axios:"^1.2.0","axios-retry":"^3.4.0",chalk:"^4.1.2",colors:"^1.4.0",commander:"^11.1.0","date-fns":"^2.29.3",debug:"^4.3.4",dotenv:"^16.0.3",execa:"^7.2.0",getos:"^3.2.1","image-size":"^1.0.2","json-stringify-safe":"^5.0.1",lodash:"^4.17.21","p-all":"^3.0.0",pino:"^8.11.0","pretty-ms":"^7.0.1",randomstring:"^1.2.3","source-map-support":"^0.5.21","stack-utils":"^2.0.6","tmp-promise":"^3.0.3","ts-pattern":"^4.3.0"},files:["dist","!**/*.map","!**/*/*.map","**/*.LEGAL.txt","LICENSE.md","README.md","CHANGELOG.md"],keywords:["playwright","playwright dashboard","cloud dashboard","reporter","currents","tests reporter","sorry cypress","ci"],exports:{".":{import:"./dist/index.js",require:"./dist/index.js"},"./parallel":{import:"./dist/parallel/index.js",require:"./dist/parallel/index.js"},"./package.json":"./package.json"},publishConfig:{access:"public",registry:"https://registry.npmjs.org"},"release-it":{npm:{publish:!1},github:{release:!0},plugins:{"@release-it/conventional-changelog":{preset:"angular",header:"# Changelog",ignoreVersion:!0,infile:"../../CHANGELOG.md"}},git:{commitMessage:"chore: release v${version}",tagName:"v${version}"}}};var b=y.version;var w=(e=new o.Command)=>e.name("pwc").usage("[options] [playwright arguments and flags]").allowUnknownOption().showHelpAfterError("(add --help for additional information)").description(`\u{1F3AD} Run Playwright tests on CI using https://currents.dev

----------------------------------------------------
\u{1F4D6} Documentation: https://currents.dev/readme
\u{1F919} Support:       support@currents.dev
----------------------------------------------------

${C.default.bold("Examples")}

Run all tests in the current directory:
    ${d("pwc --key <record-key> --project-id <id> --ci-build-id <build-id>")}

Run only tests filtered by the tag "@smoke":
    ${d("pwc --key <record-key> --project-id <id> --ci-build-id <build-id> --grep smoke")}

Run playwright tests and add tags "tagA", "tagB" to the recorded run:
    ${d("pwc --key <record-key> --project-id <id> --ci-build-id <build-id> --tag tagA --tag tagB")}

Provide playwright arguments and flags:
    ${d("pwc --key <record-key> --project-id <id> --ci-build-id <build-id> -- --workers 2 --timeout 10000 --shard 1/2")}
`).addOption(new o.Option("--ci-build-id <id>","the unique identifier for a run").env(l("ciBuildId"))).addOption(new o.Option("-k, --key <record-key>","your secret Record Key obtained from Currents").env(l("recordKey"))).addOption(new o.Option("-p, --project-id <project>","the project ID for results reporting obtained from Currents").env(l("projectId"))).addOption(new o.Option("-t, --tag <tag>","comma-separated tag(s) for recorded runs in Currents").argParser(D)).addOption(new o.Option("--pwc-enable-test-results","enable reporting test-level results").default(!1).hideHelp()).addOption(new o.Option("--pwc-remove-title-tags","remove tags from test names in Currents, e.g. `Test name @smoke` becomes `Test name` in the dashboard").default(!1)).addOption(new o.Option("--pwc-debug","enable debug logs for the reporter").default(!1)).addOption(new o.Option("--pwc-inspect","enable inspect mode, run playwright with --inspect-brk flag or developments and debugging").default(!1)).version(b);function D(e,r=[]){return e?r.concat(e.split(",").map(n=>n.trim())):r}var h=require("tmp-promise"),x=async()=>{let{path:e}=await(0,h.file)();return e};require("dotenv").config();async function S(){let e=w().parse(),r=e.opts();i("cli options: %o",r);let n=f(r);i("parsed cli options: %o",n);let c=await x();v.default.writeFileSync(c,JSON.stringify(n)),i("cli options temp file path: %s",c);let{execa:a}=await import("execa");return a("playwright",["test","--reporter","@currents/playwright",...e.args],{stdio:"inherit",reject:!1,env:{...process.env,CURRENTS_PWC_CONFIG_PATH:c,NODE_OPTIONS:r.pwcInspect?"--inspect-brk=9440":"",DEBUG:r.pwcDebug?process.env.DEBUG?`${process.env.DEBUG},currents*`:"currents*":process.env.DEBUG}})}S().then(e=>{i("execa result: %o",e),process.exit(e.exitCode??0)}).catch(e=>{i("execa failed: %o",e),process.exit(1)});
//# sourceMappingURL=index.js.map